type: edu
custom_name: Error!
files:
- name: src/sorting/Main.java
  visible: true
  text: |-
    package sorting;

    import java.util.*;

    public class Main {
        public static String inpType = "word";
        public static String maxWord = "longest";
        public static String separator = " ";

        public static boolean isNaturalSorting = true;

        public static void main(final String[] args) {


            ArrayList<String> strings = new ArrayList<>();
            ArrayList<MyPair<String>> stringsMap = new ArrayList<>();

            ArrayList<Long> longs = new ArrayList<>();
            ArrayList<MyPair<Long>> longsMap = new ArrayList<>();

            ArrayList<String> argList = new ArrayList<>(Arrays.asList(args));

            int sortIntegersPos = argList.indexOf("-sortingType");
            if (sortIntegersPos >= 0 && sortIntegersPos < (argList.size() - 1)) {
                if (argList.get(sortIntegersPos + 1).equals("byCount")) {
                    isNaturalSorting = false;
                }
            }

            int dataTypePos = argList.indexOf("-dataType");
            if (dataTypePos == -1 || argList.get(dataTypePos + 1).equals("word")) {
                readWords(strings);
                if (isNaturalSorting) {
                    strings.sort(new MyComparator<>());
                    printNatural(strings);
                }
                else {
                    convertToMap(strings, stringsMap);
                    stringsMap.sort(new MyComparator<>());
                    printByCount(stringsMap, strings.size());
                }
            } else if (argList.get(dataTypePos + 1).equals("line")) {
                inpType = "line";
                separator = "\n";
                readLines(strings);
                if (isNaturalSorting) {
                    strings.sort(new MyComparator<>());
                    printNatural(strings);
                }
                else {
                    convertToMap(strings, stringsMap);
                    stringsMap.sort(new MyComparator<>());
                    printByCount(stringsMap, strings.size());
                }
            } else if (argList.get(dataTypePos + 1).equals("long")) {
                inpType = "number";
                maxWord = "greatest";
                readLongs(longs);
                if (isNaturalSorting) {
                    longs.sort(new MyComparator<>());
                    printNatural(longs);
                }
                else {
                    convertToMap(longs, longsMap);
                    longsMap.sort(new MyComparator<>());
                    printByCount(longsMap, longs.size());
                }
            } else {
                System.out.println("Wrong data type!");
            }


        }

        private static <T extends Comparable> void printByCount(ArrayList<MyPair<T>> map, int size) {
            System.out.println("Total " + inpType + "s: " + size + ".");
            for (MyPair<T> pair : map) {
                System.out.println(pair.key + ": " + pair.num + " time(s), " + (pair.num * 100 / size) + "%");
            }
        }

        private static <T> void printNatural(ArrayList<T> list) {
            System.out.println("Total " + inpType + "s: " + list.size() + ".");
            System.out.print("Sorted data:");
            for (T elem : list) System.out.print(separator + elem);
            System.out.println();
        }

        private static <T extends Comparable> void convertToMap(ArrayList<T> list, ArrayList<MyPair<T>> map) {
            Map<T, Integer> res = new HashMap<>();

            for (T elem : list) {
                if (res.containsKey(elem)) {
                    res.put(elem, res.get(elem) + 1);
                } else res.put(elem, 1);
            }

            for (Map.Entry<T, Integer> entry : res.entrySet()) {
                map.add(new MyPair<>(entry.getKey(), entry.getValue()));
            }
        }

        private static void readWords(ArrayList<String> words) {
            Scanner scanner = new Scanner(System.in);

            while (scanner.hasNext()) {
                String word = scanner.next();
                words.add(word);
            }
        }

        private static void readLines(ArrayList<String> lines) {
            Scanner scanner = new Scanner(System.in);

            while (scanner.hasNext()) {
                String line = scanner.nextLine();
                lines.add(line);
            }
        }

        private static void readLongs(ArrayList<Long> longs) {
            Scanner scanner = new Scanner(System.in);

            while (scanner.hasNextLong()) {
                long number = scanner.nextLong();
                longs.add(number);
            }
        }
    }

    class MyPair<T extends Comparable> {
        T key;
        int num;

        public MyPair(T key, int num) {
            this.key = key;
            this.num = num;
        }
    }

    class MyComparator <T> implements Comparator<T> {

        @Override
        public int compare(T t1, T t2) {


            long diff = 0;
            if (t1 instanceof Long) {
                diff = (long) t1 - (long) t2;
                if (diff < 0) return -1;
                if (diff > 0) return 1;
                return 0;
            }
            if (t1 instanceof String)
                return  ((String) t1).compareTo((String) t2);
            if (t1 instanceof MyPair<?>) {
                if (((MyPair<?>) t1).num > ((MyPair<?>) t2).num) return 1;
                if (((MyPair<?>) t1).num < ((MyPair<?>) t2).num) return -1;
                return ((MyPair<?>) t1).key.compareTo(((MyPair<?>) t2).key);
            }

            return 0;
        }
    }
  learner_created: false
- name: test/common/SortingToolStage5Test.kt
  visible: false
  text: |+
    package common

    import org.hyperskill.hstest.stage.StageTest
    import org.hyperskill.hstest.testcase.CheckResult
    import org.hyperskill.hstest.testcase.TestCase
    import org.hyperskill.hstest.testing.Settings
    import java.util.*

    class SortingToolStage5Test : StageTest<SortingToolClue>() {

        init {
            Settings.allowOutOfInput = true
        }

        override fun generate(): List<TestCase<SortingToolClue>> {
            return stage4Tests() + stage5Tests()
        }

        override fun check(reply: String, clue: SortingToolClue): CheckResult {
            return when {
                badArgs(clue.args) -> CheckResult(true)  // TODO: test something here
                "byCount" in clue.args -> checkByCount(reply, clue)
                else -> checkNatural(reply, clue)
            }
        }

        private fun checkByCount(reply: String, clue: SortingToolClue): CheckResult {
            return when {
                "long" in clue.args -> checkByCount(parseLongTokens(clue.consoleInput), { it.toInt() }, clue, reply)
                "word" in clue.args -> checkByCount(parseWordTokens(clue.consoleInput), { it }, clue, reply)
                "line" in clue.args -> checkByCount(parseLineTokens(clue.consoleInput), { it }, clue, reply)

                else -> throw IllegalArgumentException("Bad test: no data type found")
            }
        }

        private fun checkNatural(reply: String, clue: SortingToolClue): CheckResult {
            return when {
                "long" in clue.args -> checkNatural(parseLongTokens(clue.consoleInput), ::parseLongTokens, clue, reply)
                "word" in clue.args -> checkNatural(parseWordTokens(clue.consoleInput), ::parseWordTokens, clue, reply)
                "line" in clue.args -> checkNatural(parseLineTokens(clue.consoleInput), ::parseLineTokens, clue, reply)

                else -> throw IllegalArgumentException("Bad test: no data type found")
            }
        }

        private fun badArgs(args: List<String>): Boolean {
            val unknownArgs =
                    args.toSet() - setOf("-dataType", "-sortingType", "long", "word", "line", "natural", "byCount")

            if (unknownArgs.isNotEmpty()) {
                return true
            }

            if (args.last() == "-dataType" || args.last() == "-sortingType") {
                return true
            }

            return false
        }
    }

    fun stage5Tests(): List<TestCase<SortingToolClue>> {
        return listOf(
                createTest(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "-sortingType"
                ),
                createTest(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "-sortingType", "byCount", "-dataType", "long", "-abc"
                ),
                createTest(
                        """
                    |1111 1111
                    |22222
                    |3
                    |44
                    """.trimMargin(),
                        false,
                        "-sortingType", "byCount", "-dataType", "line", "-cde"
                ),
                createTest(
                        """
                    |1111 1111
                    |22222
                    |3
                    |44
                    """.trimMargin(),
                        false,
                        "-dataType", "line", "-sortingType"
                )
        )
    }


    fun stage4Tests(): List<TestCase<SortingToolClue>> {
        return listOf(
                createTest(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "-dataType", "long", "-sortingType", "natural"
                ),
                createTest(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "-dataType", "long"
                ),
                createTest(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "-sortingType", "byCount", "-dataType", "long"
                ),
                createTest(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "-sortingType", "byCount", "-dataType", "word"
                ),
                createTest(
                        """
                    |1 -2   333 4
                    |42
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "-sortingType", "byCount", "-dataType", "line"
                ),
                createTest(
                        """
                    |1111 1111
                    |22222
                    |3
                    |44
                    """.trimMargin(),
                        false,
                        "-sortingType", "byCount", "-dataType", "line"
                ),
                createTest(
                        """
                    |1111 1111
                    |22222
                    |3
                    |44
                    """.trimMargin(),
                        false,
                        "-sortingType", "byCount", "-dataType", "word"
                ),
                createTest(
                        """
                    |1111 1111
                    |22222
                    |3
                    |44
                    """.trimMargin(),
                        false,
                        "-sortingType", "byCount", "-dataType", "long"
                )
        )
    }


    fun revealRawTest(clue: SortingToolClue, reply: String): String {
        return with(clue) { "Args:\n${args.joinToString(" ")}\nInput:\n$consoleInput\nYour output:\n$reply\n\n" }
    }

    class SortingToolClue(val consoleInput: String, val revealTest: Boolean, val args: List<String>)

    fun createTest(
            consoleInput: String,
            revealTest: Boolean,
            vararg args: String = arrayOf("-dataType", "long")
    ): TestCase<SortingToolClue> {
        return TestCase<SortingToolClue>()
                .setAttach(SortingToolClue(consoleInput, revealTest, args.toList()))
                .setInput(consoleInput)
                .addArguments(*args)
    }

    fun parseLongTokens(input: String): List<Int> {
        val scanner = Scanner(input)

        val longTokens = mutableListOf<Int>()

        while (scanner.hasNextInt()) {
            longTokens.add(scanner.nextInt())
        }

        return longTokens
    }

    fun parseWordTokens(input: String): List<String> {
        val scanner = Scanner(input)

        val wordTokens = mutableListOf<String>()

        while (scanner.hasNext()) {
            wordTokens.add(scanner.next())
        }

        return wordTokens
    }

    fun parseLineTokens(input: String): List<String> {
        return input.lines()
    }

    fun <TokenType : Comparable<TokenType>> checkNatural(
            actualTokens: List<TokenType>,
            sortedTokensParser: (String) -> List<TokenType>,
            clue: SortingToolClue,
            reply_: String
    ): CheckResult {
        val reply = reply_.trim()
        val lines = reply.lines()

        if (lines.size != 2) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Can't parse your output: expected 2 lines.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Can't parse your output: expected 2 lines.")
            }
        }

        val totalRegex = """(\d+)""".toRegex()
        val totalMatchResult = totalRegex.find(lines[0])
        if (totalMatchResult == null) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Can't find number in the first line of your output.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Can't find number in the first line of your output.")
            }
        }

        val totalTokens = totalMatchResult.groupValues[1].toInt()

        val actualTotal = actualTokens.size

        if (actualTotal != totalTokens) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Total tokens ($totalTokens) are incorrect. Expected: $actualTotal.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Total tokens are incorrect.")
            }
        }

        val sortedActualTokens = actualTokens.sorted()

        val sortedTokens = sortedTokensParser(lines[1].substringAfter(":").dropWhile { it in setOf('\n', '\r') })

        val total = sortedTokens.size

        if (actualTotal != total) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Total sorted tokens ($total) are incorrect. Expected: $actualTotal.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Total sorted tokens are incorrect.")
            }
        }

        if (sortedActualTokens != sortedTokens) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Sorted tokens are incorrect.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Sorted tokens are incorrect.")
            }
        }

        return CheckResult(true)
    }

    fun <TokenType : Comparable<TokenType>> checkByCount(
            actualTokens: List<TokenType>,
            tokenParser: (String) -> TokenType,
            clue: SortingToolClue,
            reply_: String
    ): CheckResult {
        val reply = reply_.trim()
        val lines = reply.lines()

        val totalRegex = """(\d+)""".toRegex()
        val totalMatchResult = totalRegex.find(lines[0])
        if (totalMatchResult == null) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Can't find number in the first line of your output.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Can't find number in the first line of your output.")
            }
        }

        val totalTokens = totalMatchResult.groupValues[1].toInt()

        val actualTotal = actualTokens.size

        if (actualTotal != totalTokens) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Total tokens ($totalTokens) are incorrect. Expected: $actualTotal.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Total tokens are incorrect.")
            }
        }

        val tokenToCount = mutableMapOf<TokenType, Int>()

        for (token in actualTokens) {
            tokenToCount[token] = (tokenToCount[token] ?: 0) + 1
        }

        val actualSortedByCount = tokenToCount.toList().sortedWith(compareBy({ it.second }, { it.first }))
        val linesWithTokens = lines.drop(1)

        if (actualSortedByCount.size != linesWithTokens.size) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Lines with tokens (${linesWithTokens.size}) are incorrect. Expected: ${actualSortedByCount.size}.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Lines with tokens are incorrect.")
            }
        }

        for ((lineId, line) in linesWithTokens.withIndex()) {
            val token = tokenParser(line.substringBefore(':'))
            val info = line.substringAfter(':')

            val (actualToken, actualTimes) = actualSortedByCount[lineId]

            if (token != actualToken) {
                return if (clue.revealTest) {
                    CheckResult(
                            false,
                            "Token ($token) is incorrect. Expected: $actualToken.\n" +
                                    revealRawTest(clue, reply)
                    )
                } else {
                    CheckResult(false, "Token is incorrect.")
                }
            }

            // TODO: check info (times and percentage)
        }

        return CheckResult(true)
    }

  learner_created: false
feedback_link: https://hyperskill.org/projects/45/stages/243/implement#comment
status: Solved
record: 5
